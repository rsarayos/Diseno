package presentacion;

import dtos.CitaConPacienteDTO;
import dtos.CitaDTO;
import dtos.PacienteDTO;
import gestionCita.FGestionCita;
import gestionCita.IGestionCita;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author alex_
 */
public class FrmConsulta extends javax.swing.JDialog {
    
    private String cedula;
    private CitaDTO cita;
    private IGestionCita gestion;

    /**
     * Creates new form FrmConsulta
     */
    public FrmConsulta(java.awt.Frame parent, boolean modal, String cedula) {
        super(parent, modal);
        initComponents();
        this.cedula = cedula;
        cita = new CitaDTO();
        cita.setCedulaProfesional(cedula);
        gestion = new FGestionCita();
        accionesTabla(gestion.obtenerCitas(cita));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rbtnNombre = new javax.swing.JRadioButton();
        btnBuscar = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        rbtnFecha = new javax.swing.JRadioButton();
        datePicker1 = new com.github.lgooddatepicker.components.DatePicker();
        rbtnHora = new javax.swing.JRadioButton();
        timePicker1 = new com.github.lgooddatepicker.components.TimePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        JtableCitas = new javax.swing.JTable();
        btnRegresar = new javax.swing.JButton();
        btnReasignar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        rbtnAscendete = new javax.swing.JRadioButton();
        rbtnDesc = new javax.swing.JRadioButton();
        rbtnTodo = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Consulta de citas");
        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        jLabel2.setText("FILTROS");
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        rbtnNombre.setText("Nombre");
        rbtnNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnNombreActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.setBackground(new java.awt.Color(204, 204, 204));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        txtNombre.setEditable(false);

        rbtnFecha.setText("Fecha");
        rbtnFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnFechaActionPerformed(evt);
            }
        });

        datePicker1.setEnabled(false);
        datePicker1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                datePicker1KeyReleased(evt);
            }
        });

        rbtnHora.setText("Hora");
        rbtnHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnHoraActionPerformed(evt);
            }
        });

        timePicker1.setEnabled(false);

        JtableCitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Hora", "Fecha", "Nombre", "Observaciones", "Estado"
            }
        ));
        jScrollPane1.setViewportView(JtableCitas);

        btnRegresar.setText("Regresar");
        btnRegresar.setBackground(new java.awt.Color(204, 204, 204));
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        btnReasignar.setText("Reasignar cita");
        btnReasignar.setBackground(new java.awt.Color(204, 204, 204));
        btnReasignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReasignarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar cita");
        btnCancelar.setBackground(new java.awt.Color(204, 204, 204));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel3.setText("ORDENAR");
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        rbtnAscendete.setText("Ascendente");
        rbtnAscendete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnAscendeteActionPerformed(evt);
            }
        });

        rbtnDesc.setText("Descendente");
        rbtnDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnDescActionPerformed(evt);
            }
        });

        rbtnTodo.setText("Mostrar todo");
        rbtnTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnTodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReasignar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbtnFecha)
                            .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbtnHora)
                            .addComponent(rbtnNombre))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbtnDesc)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(rbtnAscendete))
                            .addComponent(rbtnTodo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(jLabel2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(rbtnNombre)
                        .addGap(18, 18, 18)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(rbtnTodo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnFecha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtnHora)
                            .addComponent(rbtnAscendete))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbtnDesc))
                        .addGap(68, 68, 68)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnReasignar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rbtnNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnNombreActionPerformed

        txtNombre.setEditable(rbtnNombre.isSelected());
        if (rbtnNombre.isSelected()) {
            txtNombre.setText("");
            datePicker1.setEnabled(false);
            timePicker1.setEnabled(false);
        }
    }//GEN-LAST:event_rbtnNombreActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        List<CitaDTO> nombres=new ArrayList<>();
        List<CitaDTO> fechas = new ArrayList<>();
        List<CitaDTO> horas = new ArrayList<>();

        if (!rbtnNombre.isSelected() && !rbtnHora.isSelected() && !rbtnFecha.isSelected()) {
            JOptionPane.showMessageDialog(this,"No ha seleccionado ningun filtro" ,"Informacion",JOptionPane.INFORMATION_MESSAGE);
        }else if (rbtnNombre.isSelected()) {
            if (!txtNombre.getText().isBlank()) {
                accionesTabla(nombres());
            }else{
                JOptionPane.showMessageDialog(null, "No ha insertado el nombre a buscar");
            }
        }else if(rbtnFecha.isSelected()){
            if (!datePicker1.getText().isBlank()) {
                accionesTabla(fechas());
            }else{
                JOptionPane.showMessageDialog(null, "No se ha ingresado ninguna fecha");
            }
        }else if (rbtnHora.isSelected()) {
            if (!timePicker1.getText().isBlank()) {
                accionesTabla(horas());
            }else{
                JOptionPane.showMessageDialog(null, "No se ha ingresado ninguna hora");
            }
        }

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void rbtnFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnFechaActionPerformed
        datePicker1.setEnabled(rbtnFecha.isSelected());
        if (rbtnFecha.isSelected()) {
            datePicker1.setText("");
            txtNombre.setEditable(false);
            timePicker1.setEnabled(false);
        }
    }//GEN-LAST:event_rbtnFechaActionPerformed

    private void datePicker1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_datePicker1KeyReleased

    }//GEN-LAST:event_datePicker1KeyReleased

    private void rbtnHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnHoraActionPerformed
        timePicker1.setEnabled(rbtnHora.isSelected());
        if (rbtnHora.isSelected()) {
            timePicker1.setText("");
            txtNombre.setEditable(false);
            datePicker1.setEnabled(false);
        }
    }//GEN-LAST:event_rbtnHoraActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        this.dispose();
        FrmGestionPrincipal frmGestionCita = new FrmGestionPrincipal(cedula);
        frmGestionCita.setVisible(true);
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnReasignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReasignarActionPerformed
        int filaSeleccionada = JtableCitas.getSelectedRow();

        if (filaSeleccionada != -1) {
            String estado = JtableCitas.getValueAt(filaSeleccionada, 4).toString();
            if ("Activo".equals(estado)) {
                String horaStr = JtableCitas.getValueAt(filaSeleccionada, 0).toString();
                String fechaStr = JtableCitas.getValueAt(filaSeleccionada, 1).toString();
                String cedula = this.cedula;
                try {
                    //Proceso de reasignacion y configuracion zona horaria
                    SimpleDateFormat inputFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm");
                    inputFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                    Date date = inputFormat.parse(fechaStr + " " + horaStr);

                    CitaDTO cita = new CitaDTO();
                    cita.setCedulaProfesional(cedula);
                    cita.setFechaHora(date);
                    cita.setEstado(true);
                    FrmReasignar reasig = new FrmReasignar(null, true, cita);
                    reasig.setVisible(true);
                    reasig.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                            accionesTabla(gestion.obtenerCitas(cita));
                        }
                    });
                } catch (ParseException e) {
                    System.out.println("Error al parsear la fecha: " + e.getMessage());
                }

            } else {
                JOptionPane.showMessageDialog(null, "Esta cita esta cancelada, no se puede reasignar");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado una cita");
        }
    }//GEN-LAST:event_btnReasignarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        int filaSeleccionada=JtableCitas.getSelectedRow();

        if (filaSeleccionada != -1) {
            String horaStr = JtableCitas.getValueAt(filaSeleccionada, 0).toString();
            String fechaStr = JtableCitas.getValueAt(filaSeleccionada, 1).toString();
            String estado= JtableCitas.getValueAt(filaSeleccionada, 4).toString();
            String cedula=this.cedula;
            if ("Activo".equals(estado)) {
                int confirm = JOptionPane.showConfirmDialog(null, "¿Está seguro de que desea cancelar esta cita?", "Confirmar Cancelación", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    try {
                        //Proceso de cancelacion y configuracion de la zona horaria por la bd
                        SimpleDateFormat inputFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm");
                        inputFormat.setTimeZone(TimeZone.getTimeZone("UTC"));  // Configura la zona horaria a UTC para el parseo

                        Date date = inputFormat.parse(fechaStr + " " + horaStr);
                        CitaDTO citaEliminar=new CitaDTO();
                        citaEliminar.setCedulaProfesional(cedula);
                        citaEliminar.setFechaHora(date);
                        citaEliminar.setEstado(true);

                        CitaDTO citaEliminada=gestion.cancelarCita(citaEliminar);
                        accionesTabla(gestion.obtenerCitas(this.cita));
                        if (citaEliminada!=null) {
                            JOptionPane.showMessageDialog(null, "La cita seleccionada se ha cancelada");
                        }else{
                            JOptionPane.showMessageDialog(null, "La cita no se pudo cancelar");
                        }
                    } catch (ParseException e) {
                        System.out.println("Error al parsear la fecha: " + e.getMessage());
                    }
                }
            }else{
                JOptionPane.showMessageDialog(null, "La cita seleccionada ya esta cancelada");
            }
        }else{
            JOptionPane.showMessageDialog(null, "No se ha seleccionado una cita");
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void rbtnAscendeteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnAscendeteActionPerformed
        ordenarDatos(getFiltroSeleccionado(), true);
    }//GEN-LAST:event_rbtnAscendeteActionPerformed

    private void rbtnDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnDescActionPerformed
        ordenarDatos(getFiltroSeleccionado(), false);
    }//GEN-LAST:event_rbtnDescActionPerformed

    private void rbtnTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnTodoActionPerformed
        accionesTabla(gestion.obtenerCitas(this.cita));
        txtNombre.setEditable(false);
        datePicker1.setEnabled(false);
        timePicker1.setEnabled(false);
    }//GEN-LAST:event_rbtnTodoActionPerformed

    /**
     * Metodo que se encarga de llenar la tabla ademas de configuraciones como evitar ediciones a la tabla
     * @param citas lista de citasDTO
     */
    public void accionesTabla(List<CitaConPacienteDTO> citas){
        
        SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm");
        SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MM-yyyy");
        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        
        String [] columnas = {"Hora","Fecha","Nombre","Observacion","Estado"};
        DefaultTableModel model = new DefaultTableModel(columnas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;  // Esto hará que ninguna celda sea editable
            }
        };
         
        for (CitaConPacienteDTO citaDTO : citas) {   
            String estadoTexto = citaDTO.getEstado() ? "Activo" : "Cancelada"; 
            Object[] fila = {
                dateFormat.format(citaDTO.getFechaHora()),
                dateFormat2.format(citaDTO.getFechaHora()),
                citaDTO.getPaciente().getNombres() + " " + citaDTO.getPaciente().getApellidoPaterno() + " " + citaDTO.getPaciente().getApellidoMaterno(),
                citaDTO.getObservaciones(),
                estadoTexto
            };
            model.addRow(fila);               
        }
      
        JtableCitas.setModel(model);
        
        // Configuración del sorter
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(model);
        JtableCitas.setRowSorter(sorter);
    }
    
    
    
    /**
     *  Método para obtener la dirección de ordenación seleccionada
     * @return boolean segun el orden
     */
    private boolean getOrdenSeleccionado() {
        return rbtnAscendete.isSelected();  // True si ascendente está seleccionado, false si descendente
    }

    
    /**
     * Método para obtener el filtro de columna seleccionado
     * @return el filtro
     */
    private String getFiltroSeleccionado() {
        if (rbtnNombre.isSelected()) return "Nombre";
        if (rbtnFecha.isSelected()) return "Fecha";
        if (rbtnHora.isSelected()) return "Hora";
        return null;
    }
    
    /**
     * Metodo que ordena los datos de la tabla
     * @param columna columna segun el filtro
     * @param ascendente el tipo de orden
     */
    private void ordenarDatos(String columna, boolean ascendente) {
        if (columna == null) {
            // Si no se selecciona ninguna columna, elegir una por defecto
            columna = "Fecha";  // O elige "Hora", "Nombre", o cualquier otra columna que prefieras como predeterminada
        }

        // Obtener el índice de la columna que se va a ordenar
        int columnIndex = getColumnIndex(columna);

        if (columnIndex != -1) {
            // Obtenemos el sorter de la tabla actual
            TableRowSorter<TableModel> sorter = (TableRowSorter<TableModel>) JtableCitas.getRowSorter();
            // Establecemos la clave de ordenación usando el índice de columna y la dirección de ordenación
            sorter.setSortKeys(Collections.singletonList(new RowSorter.SortKey(columnIndex, ascendente ? SortOrder.ASCENDING : SortOrder.DESCENDING)));
            // Ordenamos la tabla basándonos en las claves de ordenación establecidas
            sorter.sort();
        } else {
            // Manejar el caso donde no se encuentra la columna, por ejemplo, mostrando un mensaje de error o ignorándolo
            System.out.println("Columna no encontrada para ordenación.");
        }
    }

    
    /**
     * Método para obtener el índice de la columna basado en su nombre
     * @param columnName obtiene la columna por la que se quiere ordenar
     * @return la posicion de la columna
     */
    private int getColumnIndex(String columnName) {
        
        String[] columnas = {"Hora", "Fecha", "Nombre", "Observación", "Estado"};
        for (int i = 0; i < columnas.length; i++) {
            if (columnas[i].equals(columnName)) {
                return i;
            }
        }
        return -1; // Columna no encontrada
    }
    
    /**
     * Metodo que obtiene todas las citas por un nombre en especifico
     * @return la lista de citas con ese nombre
     */
    private List<CitaConPacienteDTO> nombres() {
        CitaDTO cit = new CitaDTO();
        cit.setCedulaProfesional(cedula);
        PacienteDTO paciente = new PacienteDTO();

        return gestion.consultarPorNombre(cedula, txtNombre.getText());
    }
    
    /**
     * Metodo que obtiene todas las citas por una fecha
     * @return las lita de fechas
     */
    private List<CitaConPacienteDTO> fechas(){
        CitaDTO cit=new CitaDTO();
        cit.setCedulaProfesional(cedula);
        LocalDate fechaNueva = datePicker1.getDate();  
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");  

        String fechaStr = fechaNueva.format(formatter);
        LocalDate parsedDate = LocalDate.parse(fechaStr, formatter);

        Date date = Date.from(parsedDate.atStartOfDay(ZoneId.systemDefault()).toInstant());

        cit.setFechaHora(date);
        return gestion.consultarPorFecha(cit);
    }

    /**
     * Metodo que obtiene la lista de citas por una hora
     * @return la lista de citas
     */
    private List<CitaConPacienteDTO> horas(){
        CitaDTO cit=new CitaDTO();
        cit.setCedulaProfesional(cedula);
        LocalTime horaNueva = timePicker1.getTime();
        List<CitaConPacienteDTO> horitas=new ArrayList<>();
        try {
            LocalDate fechaPredeterminada = LocalDate.now(); // Utiliza la fecha actual
            LocalDateTime fechaHoraCompleta = LocalDateTime.of(fechaPredeterminada, horaNueva);

            // Asegúrate de que el manejo de la zona horaria sea el correcto
            ZonedDateTime zdt = fechaHoraCompleta.atZone(ZoneId.systemDefault()).withZoneSameInstant(ZoneId.of("UTC"));
            Date date = Date.from(zdt.toInstant());

            cit.setFechaHora(date);
            horitas = gestion.consultarPorHora(cit);
        } catch (Exception e) {
            System.out.println(e);
        }
        return horitas;
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JtableCitas;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnReasignar;
    private javax.swing.JButton btnRegresar;
    private com.github.lgooddatepicker.components.DatePicker datePicker1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbtnAscendete;
    private javax.swing.JRadioButton rbtnDesc;
    private javax.swing.JRadioButton rbtnFecha;
    private javax.swing.JRadioButton rbtnHora;
    private javax.swing.JRadioButton rbtnNombre;
    private javax.swing.JRadioButton rbtnTodo;
    private com.github.lgooddatepicker.components.TimePicker timePicker1;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
